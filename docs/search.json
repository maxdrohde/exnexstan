[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 exnexstan authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maximilian Rohde. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rohde M (2023). exnexstan: Fit EXNEX models Stan. R package version 0.1.0, https://github.com/maxdrohde/exnexstan.","code":"@Manual{,   title = {exnexstan: Fit EXNEX models with Stan},   author = {Maximilian Rohde},   year = {2023},   note = {R package version 0.1.0},   url = {https://github.com/maxdrohde/exnexstan}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit EXNEX models with Stan","text":"exnexstan CRAN can installed GitHub using install_github() function devtools package. {r} install.packages(\"devtools\") # Skip devtools already installed devtools::install_github(repo = \"https://github.com/maxdrohde/exnexstan\") use exnexstan, cmdstanr package must installed working. details installing cmdstanr, see https://mc-stan.org/cmdstanr/articles/cmdstanr.html.","code":""},{"path":[]},{"path":"/reference/fit_exch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an exchangeable hierarchical model using a non-centered parameterization — fit_exch","title":"Fit an exchangeable hierarchical model using a non-centered parameterization — fit_exch","text":"fitting EXNEX model p_exch close 1, can convergence issues due funnel-like geometry arises \\(\\tau\\) close zero. special case p_exch = 1, function fits model using non-centered parameterization, can fix convergence issues. See Stan user guide information.","code":""},{"path":"/reference/fit_exch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an exchangeable hierarchical model using a non-centered parameterization — fit_exch","text":"","code":"fit_exch(   n,   r,   mu_prior_mean = -1.73,   mu_prior_sd = 2.616,   tau_prior_mean = 0,   tau_prior_sd = 1,   seed = 123456789,   chains = 4,   parallel_chains = 4,   iter_warmup = 3000,   iter_sampling = 5000,   adapt_delta = 0.9,   ... )"},{"path":"/reference/fit_exch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an exchangeable hierarchical model using a non-centered parameterization — fit_exch","text":"n integer vector number observations per strata r integer vector number \"successes\" per strata mu_prior_mean Mean normal prior set mu. mu_prior_sd Standard deviation normal prior set mu. tau_prior_mean Mean normal prior set tau. Tau lower bound zero probability mass zero reallocated. tau_prior_sd Standard deviation normal prior set tau. Tau lower bound zero, setting tau_prior_sd = 1 equivalent standard half-normal distribution. seed Set seed random number generated chains Number MCMC chains run parallel_chains Number cores use running chains parallel iter_warmup Number warmup iterations iter_sampling Number sampling iterations adapt_delta Tuning parameter MCMC sampling ... parameters passed sample function cmdstanr","code":""},{"path":"/reference/fit_exch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an exchangeable hierarchical model using a non-centered parameterization — fit_exch","text":"fitted cmdstanr model","code":""},{"path":[]},{"path":"/reference/fit_exch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an exchangeable hierarchical model using a non-centered parameterization — fit_exch","text":"","code":"if (FALSE) { # Example data from Table 1 of Neuenschwander et al. fit_exch(r = c(2, 0, 1, 6, 7, 3, 5, 1, 0, 3) |> as.integer(),          n = c(15, 13, 12, 28, 29, 29, 26, 5, 2, 20) |> as.integer(),          adapt_delta = 0.99) }"},{"path":"/reference/fit_exnex.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an EXNEX model with Stan — fit_exnex","title":"Fit an EXNEX model with Stan — fit_exnex","text":"Fit EXNEX model Stan","code":""},{"path":"/reference/fit_exnex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an EXNEX model with Stan — fit_exnex","text":"","code":"fit_exnex(   n,   r,   p_exch,   mu_prior_mean = -1.73,   mu_prior_sd = 2.616,   tau_prior_mean = 0,   tau_prior_sd = 1,   nex_prior_mean = -1.73,   nex_prior_sd = 2.801,   seed = 123456789,   chains = 4,   parallel_chains = 4,   iter_warmup = 3000,   iter_sampling = 5000,   adapt_delta = 0.9,   ... )"},{"path":"/reference/fit_exnex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an EXNEX model with Stan — fit_exnex","text":"n integer vector number observations per strata r integer vector number \"successes\" per strata p_exch numeric vector specifying prior probability exchangeability strata mu_prior_mean Mean normal prior set mu. mu_prior_sd Standard deviation normal prior set mu. tau_prior_mean Mean normal prior set tau. Tau lower bound zero probability mass zero reallocated. tau_prior_sd Standard deviation normal prior set tau. Tau lower bound zero, setting tau_prior_sd = 1 equivalent standard half-normal distribution. nex_prior_mean Mean normal prior set non-exchangeable distributions. nex_prior_sd Standard deviation normal prior set non-exchangeable distributions. seed Set seed random number generated chains Number MCMC chains run parallel_chains Number cores use running chains parallel iter_warmup Number warmup iterations iter_sampling Number sampling iterations adapt_delta Tuning parameter MCMC sampling ... parameters passed sample function cmdstanr","code":""},{"path":"/reference/fit_exnex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an EXNEX model with Stan — fit_exnex","text":"fitted cmdstanr model","code":""},{"path":"/reference/fit_exnex.html","id":"mcmc-convergence-issues","dir":"Reference","previous_headings":"","what":"MCMC convergence issues","title":"Fit an EXNEX model with Stan — fit_exnex","text":"p_exch set close 1, can convergence issues due funnel-like geometry arises \\(\\tau\\) close zero. See fit_exnex() function, can fix convergence issue using non-centered parameterization model special case p_exch = 1.","code":""},{"path":"/reference/fit_exnex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an EXNEX model with Stan — fit_exnex","text":"","code":"if (FALSE) { # Example data from Table 1 of Neuenschwander et al. fit_exnex(r = c(2, 0, 1, 6, 7, 3, 5, 1, 0, 3) |> as.integer(),           n = c(15, 13, 12, 28, 29, 29, 26, 5, 2, 20) |> as.integer(),           p_exch = rep(0.5, 10),           adapt_delta = 0.99) }"},{"path":"/reference/fit_exnex_varying_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an EXNEX model for varying follow-up time with Stan — fit_exnex_varying_time","title":"Fit an EXNEX model for varying follow-up time with Stan — fit_exnex_varying_time","text":"Fit EXNEX model varying follow-time Stan","code":""},{"path":"/reference/fit_exnex_varying_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an EXNEX model for varying follow-up time with Stan — fit_exnex_varying_time","text":"","code":"fit_exnex_varying_time(   t,   r,   p_exch,   mu_prior_mean = -1.73,   mu_prior_sd = 2.616,   tau_lower_bound = 0,   tau_prior_mean = 0,   tau_prior_sd = 1,   nex_prior_mean = -1.73,   nex_prior_sd = 2.801,   seed = 123456789,   chains = 4,   parallel_chains = 4,   iter_warmup = 3000,   iter_sampling = 5000,   adapt_delta = 0.9,   ... )"},{"path":"/reference/fit_exnex_varying_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an EXNEX model for varying follow-up time with Stan — fit_exnex_varying_time","text":"t numeric vector follow-time per strata r integer vector number events per strata p_exch numeric vector specifying prior probability exchangeability strata mu_prior_mean Mean normal prior set mu. mu_prior_sd Standard deviation normal prior set mu. tau_lower_bound Lower bound tau parameter. probability mass reallocated. tau_prior_mean Mean normal prior set tau. Tau lower bound probability mass reallocated. tau_prior_sd Standard deviation normal prior set tau. Tau lower bound zero, setting tau_prior_sd = 1 equivalent standard half-normal distribution. nex_prior_mean Mean normal prior set non-exchangeable distributions. nex_prior_sd Standard deviation normal prior set non-exchangeable distributions. seed Set seed random number generated chains Number MCMC chains run parallel_chains Number cores use running chains parallel iter_warmup Number warmup iterations iter_sampling Number sampling iterations adapt_delta Tuning parameter MCMC sampling ... parameters passed sample function cmdstanr","code":""},{"path":"/reference/fit_exnex_varying_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an EXNEX model for varying follow-up time with Stan — fit_exnex_varying_time","text":"fitted cmdstanr model","code":""},{"path":"/reference/fit_exnex_varying_time.html","id":"mcmc-convergence-issues","dir":"Reference","previous_headings":"","what":"MCMC convergence issues","title":"Fit an EXNEX model for varying follow-up time with Stan — fit_exnex_varying_time","text":"p_exch set close 1, can convergence issues due funnel-like geometry arises \\(\\tau\\) close zero. Setting lower bound tau can help .","code":""},{"path":"/reference/fit_exnex_varying_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an EXNEX model for varying follow-up time with Stan — fit_exnex_varying_time","text":"","code":"if (FALSE) { fit_exnex_varying_time(   r = rep(5, 10) |> as.integer(),   t = seq(5, 50, length.out=10),   p_exch = rep(0.5, 10),   adapt_delta = 0.99 ) }"},{"path":"/reference/summary_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt HTML summary table from a fitted EXNEX model — summary_table","title":"Create a gt HTML summary table from a fitted EXNEX model — summary_table","text":"Create gt HTML summary table fitted EXNEX model","code":""},{"path":"/reference/summary_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt HTML summary table from a fitted EXNEX model — summary_table","text":"","code":"summary_table(exnex_model)"},{"path":"/reference/summary_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt HTML summary table from a fitted EXNEX model — summary_table","text":"exnex_model fitted EXNEX model","code":""},{"path":"/reference/summary_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt HTML summary table from a fitted EXNEX model — summary_table","text":"gt HTML table summarizing model results","code":""},{"path":"/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"}]
